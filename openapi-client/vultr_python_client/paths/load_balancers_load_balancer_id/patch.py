# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from vultr_python_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vultr_python_client import schemas  # noqa: F401

from . import path

# Path params
LoadBalancerIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'load-balancer-id': typing.Union[LoadBalancerIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_load_balancer_id = api_client.PathParameter(
    name="load-balancer-id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=LoadBalancerIdSchema,
    required=True,
)
# body param


class SchemaForRequestBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class ssl(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        private_key = schemas.StrSchema
                        certificate = schemas.StrSchema
                        chain = schemas.StrSchema
                        __annotations__ = {
                            "private_key": private_key,
                            "certificate": certificate,
                            "chain": chain,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["private_key"]) -> MetaOapg.properties.private_key: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["certificate"]) -> MetaOapg.properties.certificate: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["chain"]) -> MetaOapg.properties.chain: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["private_key", "certificate", "chain", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["private_key"]) -> typing.Union[MetaOapg.properties.private_key, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["certificate"]) -> typing.Union[MetaOapg.properties.certificate, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["chain"]) -> typing.Union[MetaOapg.properties.chain, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["private_key", "certificate", "chain", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    private_key: typing.Union[MetaOapg.properties.private_key, str, schemas.Unset] = schemas.unset,
                    certificate: typing.Union[MetaOapg.properties.certificate, str, schemas.Unset] = schemas.unset,
                    chain: typing.Union[MetaOapg.properties.chain, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ssl':
                    return super().__new__(
                        cls,
                        *_args,
                        private_key=private_key,
                        certificate=certificate,
                        chain=chain,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class sticky_session(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        cookie_name = schemas.StrSchema
                        __annotations__ = {
                            "cookie_name": cookie_name,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["cookie_name"]) -> MetaOapg.properties.cookie_name: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["cookie_name", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["cookie_name"]) -> typing.Union[MetaOapg.properties.cookie_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cookie_name", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    cookie_name: typing.Union[MetaOapg.properties.cookie_name, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'sticky_session':
                    return super().__new__(
                        cls,
                        *_args,
                        cookie_name=cookie_name,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class forwarding_rules(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                frontend_protocol = schemas.StrSchema
                                frontend_port = schemas.IntSchema
                                backend_protocol = schemas.StrSchema
                                backend_port = schemas.IntSchema
                                __annotations__ = {
                                    "frontend_protocol": frontend_protocol,
                                    "frontend_port": frontend_port,
                                    "backend_protocol": backend_protocol,
                                    "backend_port": backend_port,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["frontend_protocol"]) -> MetaOapg.properties.frontend_protocol: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["frontend_port"]) -> MetaOapg.properties.frontend_port: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["backend_protocol"]) -> MetaOapg.properties.backend_protocol: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["backend_port"]) -> MetaOapg.properties.backend_port: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["frontend_protocol", "frontend_port", "backend_protocol", "backend_port", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["frontend_protocol"]) -> typing.Union[MetaOapg.properties.frontend_protocol, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["frontend_port"]) -> typing.Union[MetaOapg.properties.frontend_port, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["backend_protocol"]) -> typing.Union[MetaOapg.properties.backend_protocol, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["backend_port"]) -> typing.Union[MetaOapg.properties.backend_port, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["frontend_protocol", "frontend_port", "backend_protocol", "backend_port", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            frontend_protocol: typing.Union[MetaOapg.properties.frontend_protocol, str, schemas.Unset] = schemas.unset,
                            frontend_port: typing.Union[MetaOapg.properties.frontend_port, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            backend_protocol: typing.Union[MetaOapg.properties.backend_protocol, str, schemas.Unset] = schemas.unset,
                            backend_port: typing.Union[MetaOapg.properties.backend_port, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                frontend_protocol=frontend_protocol,
                                frontend_port=frontend_port,
                                backend_protocol=backend_protocol,
                                backend_port=backend_port,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'forwarding_rules':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class health_check(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        protocol = schemas.StrSchema
                        port = schemas.IntSchema
                        path = schemas.StrSchema
                        check_interval = schemas.StrSchema
                        response_timeout = schemas.StrSchema
                        unhealthy_threshold = schemas.StrSchema
                        healthy_threshold = schemas.StrSchema
                        __annotations__ = {
                            "protocol": protocol,
                            "port": port,
                            "path": path,
                            "check_interval": check_interval,
                            "response_timeout": response_timeout,
                            "unhealthy_threshold": unhealthy_threshold,
                            "healthy_threshold": healthy_threshold,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["protocol"]) -> MetaOapg.properties.protocol: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["port"]) -> MetaOapg.properties.port: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["check_interval"]) -> MetaOapg.properties.check_interval: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["response_timeout"]) -> MetaOapg.properties.response_timeout: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["unhealthy_threshold"]) -> MetaOapg.properties.unhealthy_threshold: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["healthy_threshold"]) -> MetaOapg.properties.healthy_threshold: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["protocol", "port", "path", "check_interval", "response_timeout", "unhealthy_threshold", "healthy_threshold", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["protocol"]) -> typing.Union[MetaOapg.properties.protocol, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["port"]) -> typing.Union[MetaOapg.properties.port, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["check_interval"]) -> typing.Union[MetaOapg.properties.check_interval, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["response_timeout"]) -> typing.Union[MetaOapg.properties.response_timeout, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["unhealthy_threshold"]) -> typing.Union[MetaOapg.properties.unhealthy_threshold, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["healthy_threshold"]) -> typing.Union[MetaOapg.properties.healthy_threshold, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["protocol", "port", "path", "check_interval", "response_timeout", "unhealthy_threshold", "healthy_threshold", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    protocol: typing.Union[MetaOapg.properties.protocol, str, schemas.Unset] = schemas.unset,
                    port: typing.Union[MetaOapg.properties.port, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
                    check_interval: typing.Union[MetaOapg.properties.check_interval, str, schemas.Unset] = schemas.unset,
                    response_timeout: typing.Union[MetaOapg.properties.response_timeout, str, schemas.Unset] = schemas.unset,
                    unhealthy_threshold: typing.Union[MetaOapg.properties.unhealthy_threshold, str, schemas.Unset] = schemas.unset,
                    healthy_threshold: typing.Union[MetaOapg.properties.healthy_threshold, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'health_check':
                    return super().__new__(
                        cls,
                        *_args,
                        protocol=protocol,
                        port=port,
                        path=path,
                        check_interval=check_interval,
                        response_timeout=response_timeout,
                        unhealthy_threshold=unhealthy_threshold,
                        healthy_threshold=healthy_threshold,
                        _configuration=_configuration,
                        **kwargs,
                    )
            proxy_protocol = schemas.BoolSchema
            ssl_redirect = schemas.BoolSchema
            http2 = schemas.BoolSchema
            balancing_algorithm = schemas.StrSchema
            
            
            class instances(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'instances':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            label = schemas.StrSchema
            private_network = schemas.StrSchema
            vpc = schemas.StrSchema
            
            
            class firewall_rules(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                port = schemas.IntSchema
                                source = schemas.StrSchema
                                ip_type = schemas.StrSchema
                                __annotations__ = {
                                    "port": port,
                                    "source": source,
                                    "ip_type": ip_type,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["port"]) -> MetaOapg.properties.port: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ip_type"]) -> MetaOapg.properties.ip_type: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["port", "source", "ip_type", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["port"]) -> typing.Union[MetaOapg.properties.port, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ip_type"]) -> typing.Union[MetaOapg.properties.ip_type, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["port", "source", "ip_type", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            port: typing.Union[MetaOapg.properties.port, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
                            ip_type: typing.Union[MetaOapg.properties.ip_type, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                port=port,
                                source=source,
                                ip_type=ip_type,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'firewall_rules':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "ssl": ssl,
                "sticky_session": sticky_session,
                "forwarding_rules": forwarding_rules,
                "health_check": health_check,
                "proxy_protocol": proxy_protocol,
                "ssl_redirect": ssl_redirect,
                "http2": http2,
                "balancing_algorithm": balancing_algorithm,
                "instances": instances,
                "label": label,
                "private_network": private_network,
                "vpc": vpc,
                "firewall_rules": firewall_rules,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssl"]) -> MetaOapg.properties.ssl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sticky_session"]) -> MetaOapg.properties.sticky_session: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["forwarding_rules"]) -> MetaOapg.properties.forwarding_rules: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["health_check"]) -> MetaOapg.properties.health_check: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proxy_protocol"]) -> MetaOapg.properties.proxy_protocol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssl_redirect"]) -> MetaOapg.properties.ssl_redirect: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["http2"]) -> MetaOapg.properties.http2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balancing_algorithm"]) -> MetaOapg.properties.balancing_algorithm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instances"]) -> MetaOapg.properties.instances: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["private_network"]) -> MetaOapg.properties.private_network: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vpc"]) -> MetaOapg.properties.vpc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firewall_rules"]) -> MetaOapg.properties.firewall_rules: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ssl", "sticky_session", "forwarding_rules", "health_check", "proxy_protocol", "ssl_redirect", "http2", "balancing_algorithm", "instances", "label", "private_network", "vpc", "firewall_rules", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssl"]) -> typing.Union[MetaOapg.properties.ssl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sticky_session"]) -> typing.Union[MetaOapg.properties.sticky_session, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["forwarding_rules"]) -> typing.Union[MetaOapg.properties.forwarding_rules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["health_check"]) -> typing.Union[MetaOapg.properties.health_check, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proxy_protocol"]) -> typing.Union[MetaOapg.properties.proxy_protocol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssl_redirect"]) -> typing.Union[MetaOapg.properties.ssl_redirect, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["http2"]) -> typing.Union[MetaOapg.properties.http2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balancing_algorithm"]) -> typing.Union[MetaOapg.properties.balancing_algorithm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instances"]) -> typing.Union[MetaOapg.properties.instances, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["private_network"]) -> typing.Union[MetaOapg.properties.private_network, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vpc"]) -> typing.Union[MetaOapg.properties.vpc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firewall_rules"]) -> typing.Union[MetaOapg.properties.firewall_rules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ssl", "sticky_session", "forwarding_rules", "health_check", "proxy_protocol", "ssl_redirect", "http2", "balancing_algorithm", "instances", "label", "private_network", "vpc", "firewall_rules", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ssl: typing.Union[MetaOapg.properties.ssl, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        sticky_session: typing.Union[MetaOapg.properties.sticky_session, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        forwarding_rules: typing.Union[MetaOapg.properties.forwarding_rules, list, tuple, schemas.Unset] = schemas.unset,
        health_check: typing.Union[MetaOapg.properties.health_check, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        proxy_protocol: typing.Union[MetaOapg.properties.proxy_protocol, bool, schemas.Unset] = schemas.unset,
        ssl_redirect: typing.Union[MetaOapg.properties.ssl_redirect, bool, schemas.Unset] = schemas.unset,
        http2: typing.Union[MetaOapg.properties.http2, bool, schemas.Unset] = schemas.unset,
        balancing_algorithm: typing.Union[MetaOapg.properties.balancing_algorithm, str, schemas.Unset] = schemas.unset,
        instances: typing.Union[MetaOapg.properties.instances, list, tuple, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        private_network: typing.Union[MetaOapg.properties.private_network, str, schemas.Unset] = schemas.unset,
        vpc: typing.Union[MetaOapg.properties.vpc, str, schemas.Unset] = schemas.unset,
        firewall_rules: typing.Union[MetaOapg.properties.firewall_rules, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaForRequestBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            ssl=ssl,
            sticky_session=sticky_session,
            forwarding_rules=forwarding_rules,
            health_check=health_check,
            proxy_protocol=proxy_protocol,
            ssl_redirect=ssl_redirect,
            http2=http2,
            balancing_algorithm=balancing_algorithm,
            instances=instances,
            label=label,
            private_network=private_network,
            vpc=vpc,
            firewall_rules=firewall_rules,
            _configuration=_configuration,
            **kwargs,
        )


request_body_any_type = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
_auth = [
    'APIKey',
]


@dataclass
class ApiResponseFor204(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_204 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor204,
)


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: schemas.Unset = schemas.unset
    headers: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
)
_status_code_to_response = {
    '204': _response_for_204,
    '400': _response_for_400,
    '401': _response_for_401,
    '403': _response_for_403,
    '404': _response_for_404,
}


class BaseApi(api_client.Api):
    @typing.overload
    def _update_load_balancer_oapg(
        self,
        content_type: typing_extensions.Literal["application/json"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor204,
    ]: ...

    @typing.overload
    def _update_load_balancer_oapg(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor204,
    ]: ...


    @typing.overload
    def _update_load_balancer_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _update_load_balancer_oapg(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor204,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _update_load_balancer_oapg(
        self,
        content_type: str = 'application/json',
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Update Load Balancer
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_load_balancer_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        _headers = HTTPHeaderDict()
        # TODO add cookie handling

        _fields = None
        _body = None
        if body is not schemas.unset:
            serialized_data = request_body_any_type.serialize(body, content_type)
            _headers.add('Content-Type', content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='patch'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class UpdateLoadBalancer(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def update_load_balancer(
        self,
        content_type: typing_extensions.Literal["application/json"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor204,
    ]: ...

    @typing.overload
    def update_load_balancer(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor204,
    ]: ...


    @typing.overload
    def update_load_balancer(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def update_load_balancer(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor204,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def update_load_balancer(
        self,
        content_type: str = 'application/json',
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._update_load_balancer_oapg(
            body=body,
            path_params=path_params,
            content_type=content_type,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpatch(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def patch(
        self,
        content_type: typing_extensions.Literal["application/json"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor204,
    ]: ...

    @typing.overload
    def patch(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor204,
    ]: ...


    @typing.overload
    def patch(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def patch(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor204,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def patch(
        self,
        content_type: str = 'application/json',
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        path_params: RequestPathParams = frozendict.frozendict(),
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._update_load_balancer_oapg(
            body=body,
            path_params=path_params,
            content_type=content_type,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


